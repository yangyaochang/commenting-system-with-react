{"version":3,"sources":["component/CommentInput/index.js","component/Comment/index.js","component/CommentList/index.js","component/CommentApp/index.js","serviceWorker.js","index.js"],"names":["CommentInput","props","state","userName","comment","this","_loadUserName","textareaRef","focus","event","setState","target","value","onSubmit","commentedTime","Date","_saveUserName","sessionStorage","setItem","getItem","className","type","onChange","handleUserNameChange","bind","onBlur","handleUserNameBlur","ref","textarea","handleCommentChange","onClick","handleSubmit","Component","Comment","timeString","_updateTimeString","_timer","setInterval","clearInterval","onDeleteComment","index","duration","now","Math","round","max","handleDeleteComment","CommentList","comments","map","key","defaultProps","ComponentApp","_loadComments","JSON","parse","stringify","alert","push","_saveComments","splice","handleSubmitComment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29c6ffe7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from '../../../node_modules/prop-types'\n\nexport default class CommentInput extends Component {\n    // onSubmit has to be a function\n    static propTypes = {\n        onSubmit: PropTypes.func\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            userName: '',\n            comment: ''\n        }\n    }\n\n    componentWillMount() {\n        this._loadUserName()\n    }\n\n    componentDidMount() {\n        this.textareaRef.focus()\n    }\n\n    handleUserNameChange(event) {\n        this.setState({\n            userName: event.target.value\n        })\n    }\n\n    handleCommentChange(event) {\n        this.setState({\n            comment: event.target.value\n        })\n    }\n\n    handleSubmit() {\n        if (this.props.onSubmit) {\n            this.props.onSubmit({\n                userName: this.state.userName,\n                comment: this.state.comment,\n                commentedTime: +new Date()\n                // Date()\n            })\n        }\n        this.setState({\n            comment: 'What\\'s on your mind?'\n        })\n    }\n\n    handleUserNameBlur(event) {\n        this._saveUserName(event.target.value)\n    }\n\n    // Use single underscore for private method\n    _saveUserName(userName) {\n        // Windoe.sessionStorage\n        sessionStorage.setItem('userName', userName)\n    }\n\n    _loadUserName() {\n        const userName = sessionStorage.getItem('userName')\n        if (userName) {\n            this.setState({\n                userName\n            })\n        }\n    }\n\n    render() {\n        return(\n            <div className='comment-input'>\n                <div className='comment-field'>\n                    <span className='comment-field-name'>User Name: </span>\n                        <div className='comment-field-input'>\n                            {/* The value attribute specifies the value of an <input> element. \n                            For \"text\", \"password\", and \"hidden\" - it defines the initial (default) value of the input field. */}\n                            <input \n                                type = 'text' \n                                value = {this.state.userName} \n                                onChange = {this.handleUserNameChange.bind(this)}\n                                onBlur = {this.handleUserNameBlur.bind(this)}/>\n                        </div>\n                </div>\n\n                <div className='comment-field'>\n                    <span className='comment-field-name'>Comment: </span>\n                    <div className='comment-field-input'>\n                        <textarea \n                            type = 'text' \n                            value = {this.state.comment}\n                            ref = {(textarea) => {this.textareaRef = textarea}}\n                            onChange = {this.handleCommentChange.bind(this)}/>\n                    </div>\n                </div>\n\n                <div className='comment-field-button'>\n                    <button onClick = {this.handleSubmit.bind(this)}>\n                        Post\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport PropTypes from '../../../node_modules/prop-types'\n\nexport default class Comment extends Component {\n    propTypes\n    static propTypes = {\n        comment: PropTypes.object.isRequired,\n        onDeleteComment: PropTypes.func,\n        index: PropTypes.number\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            timeString: ''\n        }\n    }\n\n    componentWillMount() {\n        this._updateTimeString()\n        this._timer = setInterval(\n            this._updateTimeString.bind(this), 10000\n        )\n        // Update time string every 10 seconds\n    }\n\n    componentWillUnmount() {\n        clearInterval(this._timer)\n    }\n\n    handleDeleteComment() {\n        if (this.props.onDeleteComment) {\n            this.props.onDeleteComment(this.props.index)\n        }\n    }\n\n    _updateTimeString() {\n        const comment = this.props.comment\n        const duration = (+Date.now() - comment.commentedTime) / 1000\n        this.setState({\n            timeString: (duration > 60) ? `${Math.round(duration / 60)} minutes ago` : `${Math.round(Math.max(duration, 1))} seconds ago`\n        })\n    }\n\n    render () {\n        return (\n            <div className='comment'>\n                <div className='comment-username'>\n                    <span>{this.props.comment.userName} </span>ï¼š\n                </div>\n                <p>{this.props.comment.comment}</p>\n                <span className = 'comment-commentedtime'>\n                    {this.state.timeString}\n                </span>\n                <span className = 'comment-delete' onClick = {this.handleDeleteComment.bind(this)}>\n                    Delete\n                </span>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport PropTypes from '../../../node_modules/prop-types'\nimport Comment from '../Comment'\n\nexport default class CommentList extends Component {\n    static propTypes = {\n        comments: PropTypes.array,\n        onDeleteComment: PropTypes.func\n    }\n\n    static defaultProps = {\n        comments: []\n    }\n\n    handleDeleteComment(index) {\n        if (this.props.onDeleteComment) {\n            this.props.onDeleteComment(index)\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                {this.props.comments.map((comment, index) => \n                    <Comment \n                        comment = {comment} \n                        key = {index}\n                        index = {index}\n                        onDeleteComment = {this.handleDeleteComment.bind(this)}/>\n                )}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport CommentInput from '../CommentInput'\nimport CommentList from '../CommentList'\nimport './index.css'\n\nexport default class ComponentApp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            comments: []\n        }\n    }\n\n    componentWillMount() {\n        this._loadComments()\n    }\n\n    _loadComments() {\n        let comments = sessionStorage.getItem('comments')\n        if (comments) {\n            comments = JSON.parse(comments)\n            this.setState({\n                comments\n            })\n        }\n    }\n\n    _saveComments(comments) {\n        sessionStorage.setItem('comments', JSON.stringify(comments))\n    }\n\n    handleSubmitComment(comment) {\n        if (!comment) {return alert('You haven\\'t enter anything')}\n        if (!comment.userName) {return alert('Please enter user name')}\n        if (!comment.comment) {return alert('Please enter your comment')} \n\n        const comments = this.state.comments\n        comments.push(comment)\n        this.setState({\n            comments\n        })\n        this._saveComments(comments)\n    }\n\n    handleDeleteComment(index) {\n        const comments = this.state.comments\n        comments.splice(index, 1)\n        this.setState({\n            comments\n        })\n        this._saveComments(comments)\n    }\n\n    render() {\n        return(\n            <div className = 'wrapper'>\n                <CommentInput onSubmit = {this.handleSubmitComment.bind(this)}/>\n                <CommentList \n                    comments = {this.state.comments}\n                    onDeleteComment = {this.handleDeleteComment.bind(this)}/>\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CommentApp from './component/CommentApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CommentApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}